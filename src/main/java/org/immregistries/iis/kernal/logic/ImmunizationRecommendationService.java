package org.immregistries.iis.kernal.logic;

import org.hl7.fhir.r5.model.*;
import org.immregistries.iis.kernal.model.PatientReported;
import org.springframework.stereotype.Service;

import java.util.Date;

import static org.immregistries.iis.kernal.mapping.Interfaces.ImmunizationMapper.CVX;
import static org.immregistries.iis.kernal.mapping.Interfaces.PatientMapper.MRN_SYSTEM;

@Service
public class ImmunizationRecommendationService {
	private static String[] DATE_CRITERION_CODES = {"30981-5", "30980-7", "59777-3", "59778-1"};
	private static String IMMUNIZATION_RECOMMENDATION_DATE_CRITERION_SYSTEM = "http://hl7.org/fhir/ValueSet/immunization-recommendation-date-criterion";
	private static String IMMUNIZATION_RECOMMENDATION_STATUS_SYSTEM = "http://hl7.org/fhir/ValueSet/immunization-recommendation-status";


	private ImmunizationRecommendation generate() {
		ImmunizationRecommendation recommendation = new ImmunizationRecommendation();
		recommendation.setDate(new Date());
		ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent recommendationComponent = recommendation.addRecommendation()
			.setDescription("Random Sample generated by IIS Sandbox")
			.setForecastStatus(new CodeableConcept().addCoding(new Coding(IMMUNIZATION_RECOMMENDATION_STATUS_SYSTEM, "due", "Due")));
		recommendationComponent.addVaccineCode().addCoding().setSystem(CVX).setCode("106");
		ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent date = recommendationComponent.addDateCriterion()
			.setValue(new Date())
			.setCode(new CodeableConcept().addCoding(new Coding(IMMUNIZATION_RECOMMENDATION_DATE_CRITERION_SYSTEM, DATE_CRITERION_CODES[0], DATE_CRITERION_CODES[0])));
		return recommendation;
	}
//	public ImmunizationRecommendation generate(RequestDetails requestDetails) {
//		ImmunizationRecommendation recommendation = generate();
//		recommendation.setAuthority(new Reference("IIS-Sandbox/" + requestDetails.getTenantId())); // TODO get current IIS/facility id/ tenantID
//		return recommendation;
//	}


	public ImmunizationRecommendation generate(PatientReported patientReported) {
		ImmunizationRecommendation recommendation = generate();
		recommendation.setPatient(new Reference()
			.setIdentifier(new Identifier()
				.setValue(patientReported.getPatientReportedExternalLink())
				.setSystem(patientReported.getPatientReportedAuthority())));

		return recommendation;
	}

	public ImmunizationRecommendation generate(Patient patient) {
		ImmunizationRecommendation recommendation = generate();
		recommendation.setPatient(new Reference()
			.setIdentifier(patient.getIdentifier().stream()
				.filter(identifier -> identifier.getSystem().equals(MRN_SYSTEM))
				.findFirst()
				.orElse(patient.getIdentifierFirstRep())));

		return recommendation;
	}
}
